{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TitleList","state","titles","sortKey","failure","fetch","then","data","json","setState","console","log","reject","err","this","filterable","defaultPageSize","columns","id","Header","accessor","maxWidth","Cell","prop","original","Account","resizable","minWidth","sortable","style","maxHeight","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAKMA,G,wBACJ,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,OAAQ,GACRC,QAAS,QACTC,SAAS,GAGEC,MAAM,eACZC,MAAK,SAAAC,GACVA,EAAOA,EAAKC,OAAOF,MAAK,SAAAC,GACtB,EAAKE,SAAS,CAACP,OAAQK,IACvBG,QAAQC,IAAIJ,KACX,EAAKK,UACP,EAAKA,QAdG,E,oEAiBNC,GACLC,KAAKL,SAAS,CAACL,QAASS,M,+BAIxB,IAAMZ,EAAQa,KAAKb,MACnB,GAAIA,EAAMG,QACR,OACE,yDAmHJ,OACE,kBAAC,IAAD,CAAYG,KAAMN,EAAMC,OAAQa,YAAY,EAAMC,gBAAiB,GAAIC,QAhHzD,CACd,CACEC,GAAI,UACJC,OAAQ,KACRC,SAAU,UACVC,SAAU,GACVN,YAAY,EACZO,KAAM,YAAsB,IAAVC,EAAS,EAAnBC,SACN,OAAOD,GAAyB,IAAjBA,EAAKE,QAAgB,KAAa,IACnDC,WAAW,GAEb,CACER,GAAI,QACJC,OAAQ,QACRJ,YAAY,EACZK,SAAU,QACVO,SAAU,KAEZ,CACET,GAAI,OACJC,OAAQ,cACRJ,YAAY,EACZK,SAAU,OACVO,SAAU,KAEZ,CACET,GAAI,SACJC,OAAQ,gBACRJ,YAAY,EACZK,SAAU,SACVO,SAAU,KAEZ,CACET,GAAI,OACJC,OAAQ,qBACRJ,YAAY,EACZK,SAAU,OACVO,SAAU,KAEZ,CACET,GAAI,MACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,OAEZ,CACEF,GAAI,MACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,OAEZ,CACEF,GAAI,MACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,OAEZ,CACEF,GAAI,OACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,QAEZ,CACEF,GAAI,MACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,OAEZ,CACEF,GAAI,OACJC,OAAQ,QACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,QAEZ,CACEF,GAAI,MACJC,OAAQ,MACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,OAEZ,CACEF,GAAI,OACJC,OAAQ,OACRJ,YAAY,EACZW,WAAW,EACXL,SAAU,GACVD,SAAU,QAEZ,CACEL,YAAY,EACZM,SAAU,GACVM,SAAU,GACVD,WAAW,EACXE,UAAU,IAI6EC,MAAO,CAC9FC,UAAW,uBACVC,UAAU,4B,GAhJKC,IAAMC,YAkKfC,MAbf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAGA,kBAAC,EAAD,SCrJYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.04006348.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\nimport './App.css';\n\nclass TitleList extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      titles: [],\n      sortKey: \"Title\",\n      failure: false\n    };\n    \n    let titles = fetch(\"titles.json\")\n    titles.then(data => {\n      data = data.json().then(data => {\n        this.setState({titles: data})\n        console.log(data)\n      }, this.reject)\n    }, this.reject)\n  }\n\n  reject(err){\n    this.setState({failure: err})\n  }\n\n  render() {\n    const state = this.state\n    if (state.failure) {\n      return (\n        <div>Failed to get title list</div>\n      )\n    }\n    \n    const columns = [\n      {\n        id: \"Account\",\n        Header: \"ID\",\n        accessor: 'Account',\n        maxWidth: 60,\n        filterable: false,\n        Cell: ({original: prop})=> {\n          return prop ? (prop.Account === 1 ? \"ID\" : \"\") : \"\"},\n        resizable: false,\n      },\n      {\n        id: \"Title\",\n        Header: \"Title\",\n        filterable: true,\n        accessor: 'Title',\n        minWidth: 250,\n      },\n      {\n        id: \"Desc\",\n        Header: \"Description\",\n        filterable: true,\n        accessor: 'Desc',\n        minWidth: 350,\n      },\n      {\n        id: \"Obtain\",\n        Header: \"How to Obtain\",\n        filterable: true,\n        accessor: 'Obtain',\n        minWidth: 250,\n      },\n      {\n        id: \"Char\",\n        Header: \"Character Required\",\n        filterable: true,\n        accessor: 'Char',\n        minWidth: 150,\n      },\n      {\n        id: \"STR\",\n        Header: \"Str\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'STR',\n      },\n      {\n        id: \"DEX\",\n        Header: \"Agi\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'DEX',\n      },\n      {\n        id: \"INT\",\n        Header: \"Int\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'INT',\n      },\n      {\n        id: \"WILL\",\n        Header: \"Wil\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'WILL',\n      },\n      {\n        id: \"ATK\",\n        Header: \"Atk\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 60,\n        accessor: 'ATK',\n      },\n      {\n        id: \"MATK\",\n        Header: \"M.Atk\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 60,\n        accessor: 'MATK',\n      },\n      {\n        id: \"BAL\",\n        Header: \"Bal\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'BAL',\n      },\n      {\n        id: \"CRIT\",\n        Header: \"Crit\",\n        filterable: false,\n        resizable: false,\n        maxWidth: 40,\n        accessor: 'CRIT',\n      },\n      {\n        filterable: false,\n        maxWidth: 20,\n        minWidth: 20,\n        resizable: false,\n        sortable: false,\n      },\n    ]\n    return (\n      <ReactTable data={state.titles} filterable={true} defaultPageSize={25} columns={columns} style={{\n        maxHeight: \"calc(100vh - 130px)\"\n      }} className=\"-striped -highlight\"></ReactTable>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Vindi Titles\n        </h1>\n        <TitleList></TitleList>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}