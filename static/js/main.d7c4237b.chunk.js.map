{"version":3,"sources":["pages/titles.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["sanitize","str","_","deburr","String","toLowerCase","genFilter","comparator","filter","row","column","id","pivotId","undefined","value","cache","TitleList","state","titles","failure","fetch","then","data","json","forEach","r","Char","Tags","map","slice","setState","reject","err","this","columns","Header","accessor","maxWidth","filterable","Cell","prop","original","Account","resizable","minWidth","filterMethod","val","includes","_original","indexOf","sortable","defaultPageSize","showPageJump","defaultFilterMethod","style","maxHeight","className","React","Component","TitlePage","height","HomePage","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAUA,SAASA,EAASC,GAChB,OAAOC,IAAEC,OAAOC,OAAOH,IAAMI,cAO/B,SAASC,EAAUC,GACjB,OAAO,SAACC,EAAQC,EAAKC,GACnB,IAAMC,EAAKH,EAAOI,SAAWJ,EAAOG,GACpC,YAAmBE,IAAZJ,EAAIE,GAAoBJ,EAAWP,EAASS,EAAIE,IAAMX,EAASQ,EAAOM,OAAQL,GAAOF,EAAW,KAAMP,EAASQ,EAAOM,OAAQL,IAIzI,IAAIM,EAAQ,GAENC,E,YACJ,aAAc,IAAD,wBACX,+CACKC,MAAQ,CACXC,OAAQ,GACRC,SAAS,GAGNJ,EAAMG,QAiBP,EAAKD,MAAMC,OAASH,EAAMG,OAhBbE,MAAM,eACZC,MAAK,SAAAC,GACZA,EAAOA,EAAKC,OAAOF,MAAK,SAAAC,GACpBpB,IAAEsB,QAAQF,GAAM,SAACG,GACZA,EAAEC,OACHD,EAAEC,KAAO,OAETD,EAAEE,OACFF,EAAEE,KAAOzB,IAAE0B,IAAIH,EAAEE,KAAM3B,OAG3Be,EAAMG,OAASI,EAAKO,QACpB,EAAKC,SAAS,CAACZ,OAAQH,EAAMG,WAC9B,EAAKa,UACL,EAAKA,QAtBD,S,oEA4BNC,GACLC,KAAKH,SAAS,CAACX,QAASa,M,+BAIxB,IAAMf,EAAQgB,KAAKhB,MACnB,GAAIA,EAAME,QACR,OACE,yDAIJ,IAAMe,EAAU,CACd,CACEvB,GAAI,UACJwB,OAAQ,KACRC,SAAU,UACVC,SAAU,GACVC,YAAY,EACZC,KAAM,YAAsB,IAAVC,EAAS,EAAnBC,SACN,OAAOD,GAAyB,IAAjBA,EAAKE,QAAgB,KAAa,IACnDC,WAAW,GAEb,CACEhC,GAAI,QACJwB,OAAQ,QACRG,YAAY,EACZF,SAAU,QACVQ,SAAU,KAEZ,CACEjC,GAAI,OACJwB,OAAQ,cACRG,YAAY,EACZF,SAAU,OACVQ,SAAU,KAEZ,CACEjC,GAAI,SACJwB,OAAQ,gBACRG,YAAY,EACZF,SAAU,SACVQ,SAAU,IACVC,aAAcvC,GAAU,SAACwC,EAAKtC,EAAQC,GACpC,OAAQqC,GAAOA,EAAIC,SAASvC,IAAaC,EAAIuC,WAAavC,EAAIuC,UAAUrB,MAAQzB,IAAE+C,QAAQxC,EAAIuC,UAAUrB,KAAMnB,IAAW,MAG7H,CACEG,GAAI,OACJwB,OAAQ,qBACRG,YAAY,EACZF,SAAU,OACVQ,SAAU,KAMZ,CACEjC,GAAI,MACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,OAEZ,CACEzB,GAAI,MACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,OAEZ,CACEzB,GAAI,MACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,OAEZ,CACEzB,GAAI,OACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,QAEZ,CACEzB,GAAI,MACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,OAEZ,CACEzB,GAAI,OACJwB,OAAQ,QACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,QAEZ,CACEzB,GAAI,MACJwB,OAAQ,MACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,OAEZ,CACEzB,GAAI,OACJwB,OAAQ,OACRG,YAAY,EACZK,WAAW,EACXN,SAAU,GACVD,SAAU,QAEZ,CACEE,YAAY,EACZD,SAAU,GACVO,SAAU,GACVD,WAAW,EACXO,UAAU,IAGd,OACE,kBAAC,IAAD,CAAY5B,KAAML,EAAMC,OAAQoB,YAAY,EAAMa,gBAAiB,GAAIjB,QAASA,EAASkB,cAAc,EACvGC,oBAAqB/C,GAAU,SAACwC,EAAKtC,GAAN,OAAesC,GAAOA,EAAIC,SAASvC,MAClE8C,MAAO,CACLC,UAAW,QACVC,UAAU,iB,GApKKC,IAAMC,WA0LfC,E,iLAfP,OACA,yBAAKL,MAAO,CACRM,OAAQ,uBAER,4BAAQJ,UAAU,cACd,6CAIJ,kBAAC,EAAD,W,GAXYC,IAAMC,WC1KfG,E,iLArBP,OACA,6BACI,4BAAQL,UAAU,cACd,qCAIJ,sDAGA,yGAGA,0I,GAfWC,IAAMC,W,eCqCdI,MAxBf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,WACb,0BAAMA,UAAU,gBAAhB,cACA,kBAAC,IAAD,CAAMO,GAAG,IAAIP,UAAU,gBAAvB,QACA,kBAAC,IAAD,CAAMO,GAAG,UAAUP,UAAU,gBAA7B,WAEF,yBAAKA,UAAU,iBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,WACZ,kBAAC,EAAD,OAEA,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YCnBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.d7c4237b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport _ from 'lodash'\r\nimport 'react-table/react-table.css'\r\nimport 'App.css';\r\n\r\n/**\r\n * @param {string} str - A string to sanitize\r\n * @return {string}\r\n */\r\nfunction sanitize(str){\r\n  return _.deburr(String(str)).toLowerCase();\r\n}\r\n\r\n/**\r\n * @param {(row: string, filter: string)=>boolean} comparator - A string to sanitize\r\n * \r\n */\r\nfunction genFilter(comparator){\r\n  return (filter, row, column) => {\r\n    const id = filter.pivotId || filter.id\r\n    return row[id] !== undefined ? comparator(sanitize(row[id]), sanitize(filter.value), row) : comparator(null, sanitize(filter.value), row)\r\n  }\r\n}\r\n\r\nlet cache = {}\r\n\r\nclass TitleList extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      titles: [],\r\n      failure: false\r\n    };\r\n    \r\n    if (!cache.titles) {\r\n        let titles = fetch(\"titles.json\")\r\n        titles.then(data => {\r\n        data = data.json().then(data => {\r\n            _.forEach(data, (r)=>{\r\n            if (!r.Char) {\r\n                r.Char = \"All\"\r\n            }\r\n            if (r.Tags) {\r\n                r.Tags = _.map(r.Tags, sanitize)\r\n            }\r\n            })\r\n            cache.titles = data.slice();\r\n            this.setState({titles: cache.titles})\r\n        }, this.reject)\r\n        }, this.reject)\r\n    } else {\r\n        this.state.titles = cache.titles;\r\n    }\r\n  }\r\n\r\n  reject(err){\r\n    this.setState({failure: err})\r\n  }\r\n\r\n  render() {\r\n    const state = this.state\r\n    if (state.failure) {\r\n      return (\r\n        <div>Failed to get title list</div>\r\n      )\r\n    }\r\n    \r\n    const columns = [\r\n      {\r\n        id: \"Account\",\r\n        Header: \"ID\",\r\n        accessor: 'Account',\r\n        maxWidth: 60,\r\n        filterable: false,\r\n        Cell: ({original: prop})=> {\r\n          return prop ? (prop.Account === 1 ? \"ID\" : \"\") : \"\"},\r\n        resizable: false,\r\n      },\r\n      {\r\n        id: \"Title\",\r\n        Header: \"Title\",\r\n        filterable: true,\r\n        accessor: 'Title',\r\n        minWidth: 250,\r\n      },\r\n      {\r\n        id: \"Desc\",\r\n        Header: \"Description\",\r\n        filterable: true,\r\n        accessor: 'Desc',\r\n        minWidth: 350,\r\n      },\r\n      {\r\n        id: \"Obtain\",\r\n        Header: \"How to Obtain\",\r\n        filterable: true,\r\n        accessor: 'Obtain',\r\n        minWidth: 250,\r\n        filterMethod: genFilter((val, filter, row)=>{\r\n          return (val && val.includes(filter)) || (row._original && row._original.Tags && _.indexOf(row._original.Tags, filter) >= 0)\r\n        })\r\n      },\r\n      {\r\n        id: \"Char\",\r\n        Header: \"Character Required\",\r\n        filterable: true,\r\n        accessor: 'Char',\r\n        minWidth: 150,\r\n        /*filterMethod: genFilter((val, filter)=>{\r\n          return !val || val === \"\" ||\r\n            (val && (val === \"all\" || val === \"\" || val.includes(filter)))\r\n        }),*/\r\n      },\r\n      {\r\n        id: \"STR\",\r\n        Header: \"Str\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'STR',\r\n      },\r\n      {\r\n        id: \"DEX\",\r\n        Header: \"Agi\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'DEX',\r\n      },\r\n      {\r\n        id: \"INT\",\r\n        Header: \"Int\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'INT',\r\n      },\r\n      {\r\n        id: \"WILL\",\r\n        Header: \"Wil\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'WILL',\r\n      },\r\n      {\r\n        id: \"ATK\",\r\n        Header: \"Atk\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 60,\r\n        accessor: 'ATK',\r\n      },\r\n      {\r\n        id: \"MATK\",\r\n        Header: \"M.Atk\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 60,\r\n        accessor: 'MATK',\r\n      },\r\n      {\r\n        id: \"BAL\",\r\n        Header: \"Bal\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'BAL',\r\n      },\r\n      {\r\n        id: \"CRIT\",\r\n        Header: \"Crit\",\r\n        filterable: false,\r\n        resizable: false,\r\n        maxWidth: 40,\r\n        accessor: 'CRIT',\r\n      },\r\n      {\r\n        filterable: false,\r\n        maxWidth: 20,\r\n        minWidth: 20,\r\n        resizable: false,\r\n        sortable: false,\r\n      },\r\n    ]\r\n    return (\r\n      <ReactTable data={state.titles} filterable={true} defaultPageSize={25} columns={columns} showPageJump={false}\r\n      defaultFilterMethod={genFilter((val, filter)=>val && val.includes(filter))}\r\n      style={{\r\n        maxHeight: \"100%\"\r\n      }} className=\"-striped\"></ReactTable>\r\n    )\r\n  }\r\n}\r\n\r\nclass TitlePage extends React.Component {\r\n    render() {\r\n        return(\r\n        <div style={{\r\n            height: \"calc(95vh - 200px)\",\r\n        }}>\r\n            <header className=\"App-header\">\r\n                <h1>\r\n                Vindi Titles\r\n                </h1>\r\n            </header>\r\n            <TitleList></TitleList>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TitlePage;","import React from 'react';\r\nimport 'App.css';\r\n\r\nclass HomePage extends React.Component {\r\n    render() {\r\n        return(\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <h1>\r\n                Home\r\n                </h1>\r\n            </header>\r\n            <h2>\r\n              Welcome to Vindi Info!\r\n            </h2>\r\n            <p>\r\n              This site is under construction and will have a proper home page soon (tm)\r\n            </p>\r\n            <p>\r\n              The title list is mostly accurate but is about a year out of date. That will be rectified soon though.\r\n            </p>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\nimport TitlePage from 'pages/titles'\nimport HomePage from 'pages/home'\nimport _ from 'lodash'\nimport 'react-table/react-table.css'\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nlet store = {};\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <div className=\"app-nav\">\n        <span className=\"app-nav-item\">Vindi Info</span>\n        <Link to=\"/\" className=\"app-nav-item\">Home</Link>\n        <Link to=\"/titles\" className=\"app-nav-item\">Titles</Link>\n      </div>\n      <div className=\"app-container\">\n      <Switch>\n        <Route path=\"/titles\">\n        <TitlePage></TitlePage>\n        </Route>\n        <Route path=\"/\">\n          <HomePage></HomePage>\n        </Route>\n      </Switch>\n      </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}